X.1 = matrix(0,t.star,1)
e.1 = rnorm(t.star)
X.1 = Y.1 + e.1
X.2 = matrix(0,t.star,1)
e.2 = rnorm(t.star)
X.2 = Y.2 + e.2
X.3 = matrix(0,t.star,1)
e.3 = rnorm(t.star)
X.3 =  Y.3 + e.3
# Plot observations
plot(X.1,type='l', ylim = c(min(X.1,X.2,X.3),max(X.1,X.2,X.3)), main  = "Observations", ylab = "X_it", xlab = "t", lty = 1, col = "blue",lwd=3)
lines(X.2,type='l', col = "red", lty = 2,lwd=3)
lines(X.3,type='l', col = "green", lty = 3,lwd=3)
legend("bottomright",legend=c("X.1t", "X.2t", "X.3t"),col=c("blue", "red", "green"), lty=1:2, cex=1, bg = "white",lwd=3)
#-------------------------------#
# Linear model between differences
#-------------------------------#
# Make the difference between observations X_1t:
X.1.2 = X.1-X.2
X.1.3 = X.1-X.3
# Make the difference between covariates and Y_1t:
Y.1.2 = Y.1-Y.2
Y.1.3 = Y.1-Y.3
# Linear model between (X_1t-X_2t) = beta.0.2 + (Y.1-Y.2)*beta.1.2
lm.1.2 = as.numeric(lm(X.1.2~Y.1.2)$coefficients)
beta.0.1.2 = lm.1.2[1]
beta.1.1.2 = lm.1.2[2]
# Linear model between (X_1t-X_3t) = beta.0.3 + (Y.1-Y.3)*beta.1.3
lm.1.3 = as.numeric(lm(X.1.3~Y.1.3)$coefficients)
beta0.1.3 = lm.1.3[1]
beta1.1.3 = lm.1.3[2]
#-------------------------------#
# Calculate the weights
#-------------------------------#
# exponent of covariate i = 2
exp.t.2 = exp((beta.1.1.2*Y.1.2)+beta.0.1.2)
# exponent of covariate i = 3
exp.t.3 = exp((beta1.1.3*Y.1.3)+beta0.1.3)
# weight of control i = 2
weight.2 = exp.t.2/(exp.t.2 + exp.t.3)
# weight of control i = 3
weight.3 = exp.t.3/(exp.t.2 + exp.t.3)
plot(weight.2, type = "l", ylim = c(min(weight.2,weight.3),max(weight.2,weight.3)), main = "Dynamic Weights", xlab  = "t", ylab = "w_it", col = "red", lty = 2,lwd=3)
lines(weight.3, type = "l", col = "green", lty = 1,lwd=3)
abline(h = mean(weight.2), lty = 2, col = "red",lwd=3)
abline(h = mean(weight.3), lty = 3, col = "green",lwd=3)
legend("bottomright",legend=c("weight.2", "weight.3"),col=c("red", "green"), lty=1:2, cex=1, bg = "white",lwd=3)
#-------------------------------#
# Compare X1 and estimates
#-------------------------------#
# mean of observations
M.X.2.3 = (X.2 + X.3)/2
# Dynamic weights
DW.X.2.3 = weight.2*X.2 + weight.3*X.3
plot(X.1,type='l', ylim = c(min(X.1,M.X.2.3,DW.X.2.3),max(X.1,M.X.2.3,DW.X.2.3)), main  = "Comparison", ylab = "X_it", xlab = "t", lty = 1, col = "blue",lwd=3)
lines(M.X.2.3, col = "green", lty = 2,lwd=3)
lines(DW.X.2.3, col = "red", lty = 3,lwd=3)
legend("bottomright",legend=c("X_1t", "Mean (X_2t,X_3t)", "Dynamic weights"),col=c("blue", "green", "red"), lty=1:3, cex=1, bg = "white",lwd=3)
#-----------------------------------------------------------#
# trash
#-----------------------------------------------------------#
# require(tidyverse)
#
# lamb.1 = function(t) if(t < 40) return(0.2*t) else return(8)
# lamb.2 = function(t) 0.05*t
# lamb.3 = function(t) if(t < 20) 0.2 - 0.02*t else 0
#
# v1  = sapply(1:50,lamb.1) #+ rnorm(50)
# v2  = sapply(1:50,lamb.2) #+ rnorm(50)
# v3  = sapply(1:50,lamb.3) #+ rnorm(50)
#
# mu.all = matrix(runif(50*3),c(3,50))
# mu.1 = c(1,0.5,0.4)
# mu.all[,1] = mu.1
#
# lamb.all = rbind(v1,v2,v3)
# smatplot(t(temp),type = "l")
# dev.off()
#
# dim(mu.all)
#
#
# matplot(t(mu.all), type = "l")
#
#
# exp(0.9-1)
#
#
# xtemp = (x1-x2)
#
# lm.temp = lm(x1~xtemp)
#
# x1 = rnorm(10)
# x2 = x1
# x2 = x1 + rnorm(5)/100
# # x2[6:10] = rnorm(5)
#
# numb = lm.temp$coefficients[1] + xtemp*lm.temp$coefficients[2]
#
# plot(exp(numb)/sum(exp(numb)), type = "l")
#
# beta1 = rnorm(10)
#
# beta0 = rnorm(10)/10
#
# diff.1 = x1-x2
# prob.1 = exp(diff.1+beta0)/sum(exp(diff.1+beta0))
#
# diff.2 = x2-x1
# prob.2 = exp(diff.2+beta0)/sum(exp(diff.2+beta0))
#
# par(mfrow = c(1,4))
# plot(diff.1,type = "l")
# lines(x1, col = "blue")
# lines(x2, col = "red")
# plot(prob.1,type = "l")
# plot(diff.2,type = "l")
# lines(x1, col = "blue")
# lines(x2, col = "red")
# plot(prob.2,type = "l")
#
# Length of the time series
t.star = 50
# Generate Covariate as random walk
Y.1 = matrix(0,t.star,1)
e.1 = rnorm(t.star)
for (t in 2:t.star) Y.1[t] = Y.1[t-1] + e.1[t]
inter.Y.3 = 2
# Generate Covariates Y.2 and Y.3
Y.2 = Y.1 + rnorm(t.star)
Y.3 = inter.Y.3 + Y.2 + rnorm(t.star) # Y.3 has a disturbance (intercept != from 0) - generate the difference
# Plot Covariates
par(mfrow = c(4,1))
plot(Y.1, type='l', ylim = c(min(Y.3,Y.2,Y.1),max(Y.3,Y.2,Y.1)), col = "blue", main = "Covariates", ylab = "Y_it", xlab = "t", lty = 1,lwd=3)
lines(Y.2,type = "l", col = "red", lty = 2,lwd=3)
lines(Y.3,type = "l", col = "green", lty = 3,lwd=3)
legend("bottomright",legend=c("Y.1t", "Y.2t", "Y.3t"),col=c("blue", "red", "green"), lty=1:3, cex=1, bg='white',lwd=3)
# Generate observations - Panel data
X.1 = matrix(0,t.star,1)
e.1 = rnorm(t.star)
X.1 = Y.1 + e.1
X.2 = matrix(0,t.star,1)
e.2 = rnorm(t.star)
X.2 = Y.2 + e.2
X.3 = matrix(0,t.star,1)
e.3 = rnorm(t.star)
X.3 =  Y.3 + e.3
# Plot observations
plot(X.1,type='l', ylim = c(min(X.1,X.2,X.3),max(X.1,X.2,X.3)), main  = "Observations", ylab = "X_it", xlab = "t", lty = 1, col = "blue",lwd=3)
lines(X.2,type='l', col = "red", lty = 2,lwd=3)
lines(X.3,type='l', col = "green", lty = 3,lwd=3)
legend("bottomright",legend=c("X.1t", "X.2t", "X.3t"),col=c("blue", "red", "green"), lty=1:2, cex=1, bg = "white",lwd=3)
#-------------------------------#
# Linear model between differences
#-------------------------------#
# Make the difference between observations X_1t:
X.1.2 = X.1-X.2
X.1.3 = X.1-X.3
# Make the difference between covariates and Y_1t:
Y.1.2 = Y.1-Y.2
Y.1.3 = Y.1-Y.3
# Linear model between (X_1t-X_2t) = beta.0.2 + (Y.1-Y.2)*beta.1.2
lm.1.2 = as.numeric(lm(X.1.2~Y.1.2)$coefficients)
beta.0.1.2 = lm.1.2[1]
beta.1.1.2 = lm.1.2[2]
# Linear model between (X_1t-X_3t) = beta.0.3 + (Y.1-Y.3)*beta.1.3
lm.1.3 = as.numeric(lm(X.1.3~Y.1.3)$coefficients)
beta0.1.3 = lm.1.3[1]
beta1.1.3 = lm.1.3[2]
#-------------------------------#
# Calculate the weights
#-------------------------------#
# exponent of covariate i = 2
exp.t.2 = exp((beta.1.1.2*Y.1.2)+beta.0.1.2)
# exponent of covariate i = 3
exp.t.3 = exp((beta1.1.3*Y.1.3)+beta0.1.3)
# weight of control i = 2
weight.2 = exp.t.2/(exp.t.2 + exp.t.3)
# weight of control i = 3
weight.3 = exp.t.3/(exp.t.2 + exp.t.3)
plot(weight.2, type = "l", ylim = c(min(weight.2,weight.3),max(weight.2,weight.3)), main = "Dynamic Weights", xlab  = "t", ylab = "w_it", col = "red", lty = 2,lwd=3)
lines(weight.3, type = "l", col = "green", lty = 1,lwd=3)
abline(h = mean(weight.2), lty = 2, col = "red",lwd=3)
abline(h = mean(weight.3), lty = 3, col = "green",lwd=3)
legend("bottomright",legend=c("weight.2", "weight.3"),col=c("red", "green"), lty=1:2, cex=1, bg = "white",lwd=3)
#-------------------------------#
# Compare X1 and estimates
#-------------------------------#
# mean of observations
M.X.2.3 = (X.2 + X.3)/2
# Dynamic weights
DW.X.2.3 = weight.2*X.2 + weight.3*X.3
plot(X.1,type='l', ylim = c(min(X.1,M.X.2.3,DW.X.2.3),max(X.1,M.X.2.3,DW.X.2.3)), main  = "Comparison", ylab = "X_it", xlab = "t", lty = 1, col = "blue",lwd=3)
lines(M.X.2.3, col = "green", lty = 2,lwd=3)
lines(DW.X.2.3, col = "red", lty = 3,lwd=3)
legend("bottomright",legend=c("X_1t", "Mean (X_2t,X_3t)", "Dynamic weights"),col=c("blue", "green", "red"), lty=1:3, cex=1, bg = "white",lwd=3)
#-----------------------------------------------------------#
# trash
#-----------------------------------------------------------#
# require(tidyverse)
#
# lamb.1 = function(t) if(t < 40) return(0.2*t) else return(8)
# lamb.2 = function(t) 0.05*t
# lamb.3 = function(t) if(t < 20) 0.2 - 0.02*t else 0
#
# v1  = sapply(1:50,lamb.1) #+ rnorm(50)
# v2  = sapply(1:50,lamb.2) #+ rnorm(50)
# v3  = sapply(1:50,lamb.3) #+ rnorm(50)
#
# mu.all = matrix(runif(50*3),c(3,50))
# mu.1 = c(1,0.5,0.4)
# mu.all[,1] = mu.1
#
# lamb.all = rbind(v1,v2,v3)
# smatplot(t(temp),type = "l")
# dev.off()
#
# dim(mu.all)
#
#
# matplot(t(mu.all), type = "l")
#
#
# exp(0.9-1)
#
#
# xtemp = (x1-x2)
#
# lm.temp = lm(x1~xtemp)
#
# x1 = rnorm(10)
# x2 = x1
# x2 = x1 + rnorm(5)/100
# # x2[6:10] = rnorm(5)
#
# numb = lm.temp$coefficients[1] + xtemp*lm.temp$coefficients[2]
#
# plot(exp(numb)/sum(exp(numb)), type = "l")
#
# beta1 = rnorm(10)
#
# beta0 = rnorm(10)/10
#
# diff.1 = x1-x2
# prob.1 = exp(diff.1+beta0)/sum(exp(diff.1+beta0))
#
# diff.2 = x2-x1
# prob.2 = exp(diff.2+beta0)/sum(exp(diff.2+beta0))
#
# par(mfrow = c(1,4))
# plot(diff.1,type = "l")
# lines(x1, col = "blue")
# lines(x2, col = "red")
# plot(prob.1,type = "l")
# plot(diff.2,type = "l")
# lines(x1, col = "blue")
# lines(x2, col = "red")
# plot(prob.2,type = "l")
#
set.seed(301)
f=function(x){
ifelse(x<.2,pnorm(x),-2*x^2+2*x)
}
curve(f,-1,1)
n = 200
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
dev.off()
set.seed(301)
f=function(x){
ifelse(x<.2,pnorm(x),-2*x^2+2*x)
}
curve(f,-1,1)
n = 200
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
curve(f,-1,1)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
# curve(f,-1,1,add=T)
# points(xx[order(xx)],model$yhat.train.mean[order(xx)],col=2,type='l',lwd=2)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
seq(-1,1,lenth.out=10)
sequence(-1,1,lenth.out=10)
sequence(-1,1,length.out=10)
seq(-1,1,length.out=10)
seq(-1,1,length.out=1000)
truef = seq(-1,1,length.out=1000)
x.grid = seq(-1,1,length.out=1000)
lines(f(xgrid))
lines(f(x.grid))
# curve(f,-1,1,add=T)
# points(xx[order(xx)],model$yhat.train.mean[order(xx)],col=2,type='l',lwd=2)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
points(xx[order(xx)],model$yhat.train.mean[order(xx)],col=2,type='l',lwd=2)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
set.seed(301)
f=function(x){
ifelse(x<.2,pnorm(x),-2*x^2+2*x)
}
curve(f,-1,1)
n = 200
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
?wbart
set.seed(301)
f=function(x){
ifelse(x<.2,pnorm(x),-2*x^2+2*x)
}
curve(f,-1,1)
n = 200
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=500)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
set.seed(301)
f=function(x){
ifelse(x<.2,pnorm(x),-2*x^2+2*x)
}
curve(f,-1,1)
n = 200
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=1000)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
n = 800
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
set.seed(301)
f=function(x){
ifelse(x<.2,pnorm(x),-2*x^2+2*x)
}
curve(f,-1,1)
n = 800
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
set.seed(301)
f=function(x){
ifelse(x<.2,pnorm(x),-2*x^2+2*x)
}
curve(f,-1,1)
n = 800
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=1000)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=100)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
set.seed(301)
f=function(x){
ifelse(x<.2,pnorm(x),-2*x^2+2*x)
}
curve(f,-1,1)
n = 200
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=100)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
curve(f,-1,1,add=T,col='purple')
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=200)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
n = 1000
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=200)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
plot(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.5),xlab="X",ylab='Y')
curve(f,-1,1,add=T,col='purple',lwd=1.5)
plot(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.1),xlab="X",ylab='Y')
curve(f,-1,1,add=T,col='purple',lwd=1.5)
plot(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.3),xlab="X",ylab='Y')
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
matplot(x.test,model$yhat.test)
length(x.test)
n = 200
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 4000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=200)
plot(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.3),xlab="X",ylab='Y')
# matplot(x.test,model$yhat.test)
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
n = 200
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=200)
plot(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.3),xlab="X",ylab='Y')
# matplot(x.test,model$yhat.test)
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
dim(model$yhat.test)
matplot(x.test,t(model$yhat.test),type='l')
matplot(x.test,t(model$yhat.test),type='l',col=rgb(1,0,0,alpha=0.3))
matplot(x.test,t(model$yhat.test),type='l',col=rgb(1,0,0,alpha=0.3),lty=1)
matplot(x.test,t(model$yhat.test),type='l',col=rgb(1,0,0,alpha=0.2),lty=1)
matplot(x.test,t(model$yhat.test),type='l',col=rgb(1,0,0,alpha=0.1),lty=1)
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
dev.off()
plot(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.3),xlab="X",ylab='Y')
matplot(x.test,t(model$yhat.test),type='l',col=rgb(1,0,0,alpha=0.1),lty=1)
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
lines(x.test,model$yhat.test.mean,col=1,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=1,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=1,type='l',lwd=1)
matplot(x.test,t(model$yhat.test),type='l',col=rgb(1,0,0,alpha=0.1),lty=1)
points(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.3),xlab="X",ylab='Y')
# curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=1,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=1,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=1,type='l',lwd=1)
matplot(x.test,t(model$yhat.test),type='l',col=rgb(1,0,0,alpha=0.05),lty=1)
points(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.5),xlab="X",ylab='Y')
dev.ofF()
dev.off()
